apply plugin: 'com.android.application'
apply from: '../buildTools/util.gradle'

android {
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    dexOptions {
        jumboMode true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.sojoline.charging"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // annotationProcessor 传参 for arouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        multiDexEnabled true
    }

    signingConfigs {

        sojoCharging {
            storeFile file(RELEASE_KEY_PAHT)
            storePassword RELEASE_KEY_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_STORE_PASSWORD
        }

        debug {
            storeFile file("../debug.keystore")
        }
    }

    buildTypes {
        renameReleaseApk(applicationVariants)
        defaultConfig.versionCode VERSION_CODE_DATE * 100 + VERSION_CODE_TIME

        debug {
            debuggable true
            signingConfig signingConfigs.sojoCharging
        }
        release {
            debuggable false
            signingConfig signingConfigs.sojoCharging

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        forPay {
            debuggable false

            applicationIdSuffix ".pay"
        }
    }

    productFlavors {
        sojoCharging {

        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile deps.junit
    testCompile deps.mockito
    // Local deps
    compile project(':presenter')
    compile project(':fragmentation')
    compile project(':lib-zxing')
    compile project(':lib-imagespickers')
    // AROUTER 阿里路由
    annotationProcessor deps.arouterCompiler
    compile deps.arouter
    compile 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'
    // butterknife
    annotationProcessor deps.butterknifeCompiler
    // umeng analytics
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.android:flexbox:0.2.6'
    //城市滚轮选择
    compile 'liji.library.dev:citypickerview:1.1.0'
    // 权限管理
    compile('com.github.hotchemi:permissionsdispatcher:2.4.0') {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:2.4.0"
    compile files('libs/pgyer_sdk_2.7.0.jar')

}

// ====== for package

def count = 0;
project.afterEvaluate {
    getTasks().findAll {
        task ->
            if (task.name.contains("assemble") && task.name.contains("Release")) {
                task.doFirst {
                    if (count == 0) {
                        refreshVersionCode(true);
                        count += 1;
                    }
                }
                task.doLast {
                    def srcFile = "build/outputs/apk";
                    def destFile = "../APK";
                    copyFile(srcFile, destFile)
                }
            }
    }
}
